
import os
import re
import datetime
import base64
import pandas as pd
from fastapi import UploadFile
from fastapi.responses import JSONResponse
from docxtpl import DocxTemplate
from PyPDF2 import PdfReader

# Base64 encoded suppliers.xlsx
SUPPLIERS_BASE64 = """"""

SUPPLIERS_PATH = "/tmp/suppliers.xlsx"
UPLOAD_DIR = "/tmp/uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Save the suppliers file on deployment
with open(SUPPLIERS_PATH, "wb") as f:
    f.write(base64.b64decode(SUPPLIERS_BASE64))

def extract_field(pattern, text, default=""):
    match = re.search(pattern, text, re.IGNORECASE)
    return match.group(1).strip() if match else default

def translate(text):
    return text  # Placeholder for translation logic

def get_exchange_rate(date_str, currency):
    try:
        return 1.95583  # Placeholder rate
    except:
        return 1.95583

async def process_invoice_upload(supplier_id: int, file: UploadFile, template: UploadFile):
    try:
        invoice_path = os.path.join(UPLOAD_DIR, file.filename)
        template_path = os.path.join(UPLOAD_DIR, template.filename)

        with open(invoice_path, "wb") as f:
            f.write(await file.read())
        with open(template_path, "wb") as f:
            f.write(await template.read())

        reader = PdfReader(invoice_path)
        text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])

        suppliers = pd.read_excel(SUPPLIERS_PATH)
        row = suppliers[suppliers["Company ID"] == supplier_id]
        if row.empty:
            return JSONResponse(content={"success": False, "error": "Supplier not found"})

        invoice_number = str(int(row["Last invoice number"].values[0]) + 1).zfill(10)
        invoice_date = extract_field(r"Date:\s*([\d/\.]+)", text).replace("/", ".")

        match = re.search(r"Total Amount of Bill:\s*([A-Z]{3})\s*([\d\.,]+)", text)
        currency, amount = (match.group(1), float(match.group(2).replace(",", ""))) if match else ("EUR", 0)

        exchange_rate = get_exchange_rate(invoice_date, currency)
        amount_bgn = round(amount * exchange_rate, 2)

        data = {
            "InvoiceNumber": invoice_number,
            "Date": invoice_date,
            "CustomerName": extract_field(r"Customer Name:\s*(.+)", text),
            "CustomerVAT": extract_field(r"Customer VAT:\s*(.+)", text),
            "CustomerID": extract_field(r"Customer ID:\s*(.+)", text),
            "CustomerAddress": extract_field(r"Customer Address:\s*(.+)", text),
            "Amount": amount,
            "AmountBGN": amount_bgn,
            "ExchangeRate": exchange_rate,
            "Currency": currency,
            "IBAN": row["IBAN"].values[0],
            "BankName": row["Bank name"].values[0],
            "SupplierName": row["Supplier Name"].values[0],
            "SupplierVAT": row["Supplier VAT number"].values[0],
            "SupplierID": row["Company ID"].values[0],
            "SupplierCity": row["City"].values[0],
            "SupplierAddress": row["Address"].values[0],
            "Month": datetime.datetime.now().strftime("%B"),
            "Year": datetime.datetime.now().year,
            "VAT": row["VAT"].values[0],
            "CompiledBy": "",  # Optional
        }

        save_path = f"/tmp/bulgarian_invoice_{invoice_number}.docx"
        doc = DocxTemplate(template_path)
        doc.render(data)
        doc.save(save_path)

        return JSONResponse(content={"success": True, "invoice_number": invoice_number, "file_path": save_path})
    except Exception as e:
        return JSONResponse(content={"success": False, "error": str(e)})
